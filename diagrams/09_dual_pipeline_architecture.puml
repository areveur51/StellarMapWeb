@startuml 09_dual_pipeline_architecture

skinparam backgroundColor #261D45
skinparam defaultFontColor #96DDF2

skinparam component {
  BackgroundColor #100D23
  BorderColor #0BE784
  FontColor #96DDF2
  ArrowColor #01C176
}

skinparam cloud {
  BackgroundColor #100D23
  BorderColor #0BE784
  FontColor #96DDF2
}

skinparam database {
  BackgroundColor #100D23
  BorderColor #0BE784
  FontColor #96DDF2
}

skinparam package {
  BackgroundColor #231B3D
  BorderColor #3f2c70
  FontColor #96DDF2
}

skinparam note {
  BackgroundColor #231B3D
  BorderColor #3f2c70
  FontColor #96DDF2
}

title <color:#0BE784>Dual-Pipeline Architecture (BigQuery + API Fallback)

' External Services
cloud "Google BigQuery\n(Stellar Hubble Dataset)" as BigQuery
cloud "Horizon API\n(Stellar.org)" as Horizon
cloud "Stellar Expert API\n(stellar.expert)" as Expert

' Django Backend Components
package "Django Backend" #231B3D {
  component "BigQuery Pipeline\n(Fast Path)\n\n• Cost Guard ($0.71 limit)\n• BigQuery Client (50-90s)\n• Child Discovery (100K max)" as BQPipeline
  component "API Pipeline\n(Reliable Fallback)\n\n• 8-Stage Processor (180-300s)\n• Rate Limiter (71% of max)\n• Tenacity Retry Logic" as APIPipeline
  component "Hybrid Orchestrator\n\n• Pipeline Router\n• Source Tracker\n• Processing Monitor" as Orchestrator
}

' Database
database "Astra DB (Cassandra)\nstellar_creator_account_lineage\n\n• pipeline_source: TEXT\n• last_pipeline_attempt: TIMESTAMP\n• processing_started_at: TIMESTAMP" as Cassandra

' Configuration
component "Admin Configuration\n(SQLite)\n\n• BigQueryPipelineConfig\n• APIRateLimiterConfig" as Admin

' Dashboard
component "Dashboard UI\n\n• Dual-Pipeline Metrics\n• API Health Monitoring\n• BigQuery Cost Tracking" as Dashboard

' Main flow paths
BigQuery -[#01C176]-> BQPipeline : Check budget
BQPipeline -[#01C176]-> Cassandra : <color:#0BE784>✓ Within limit\n<color:#96DDF2>Mark: BIGQUERY
BQPipeline -[#E5526F]-> Orchestrator : <color:#E5526F>✗ Cost exceeded\n<color:#96DDF2>Fallback to API

Orchestrator -[#01C176]-> APIPipeline : Route to API pipeline
Horizon -[#01C176]-> APIPipeline : Account data
Expert -[#01C176]-> APIPipeline : Creator + assets

APIPipeline -[#01C176]-> Cassandra : <color:#96DDF2>Mark: API or\nBIGQUERY_WITH_API_FALLBACK

' Configuration flows
Admin -[#01C176]-> BQPipeline : cost_limit_usd
Admin -[#01C176]-> Orchestrator : pipeline_mode
Admin -[#01C176]-> APIPipeline : rate limits

' Dashboard display
Cassandra -[#01C176]-> Dashboard : Query by pipeline_source

' Performance annotations
note right of BQPipeline #231B3D
  <color:#0BE784><b>Fast Path Performance:</b></color>
  <color:#96DDF2>• 50-90 seconds per account
  <color:#96DDF2>• Processes up to 100K children
  <color:#96DDF2>• Cost: ~$0.35 per account
  <color:#96DDF2>• Limited by budget constraints
end note

note right of APIPipeline #231B3D
  <color:#0BE784><b>Fallback Path Performance:</b></color>
  <color:#96DDF2>• 180-300 seconds per account
  <color:#96DDF2>• Rate-limited (71% of max)
  <color:#96DDF2>• No direct cost (free APIs)
  <color:#96DDF2>• Reliable for stuck records
end note

note bottom of Cassandra #231B3D
  <color:#0BE784><b>Dual-Pipeline Tracking Fields:</b></color>
  <color:#96DDF2>• pipeline_source: Identifies data origin
  <color:#96DDF2>• last_pipeline_attempt: Retry tracking
  <color:#96DDF2>• processing_started_at: Stuck detection
  
  <color:#0BE784><b>Migration completed:</b></color> <color:#96DDF2>2025-10-22</color>
end note

note top of Orchestrator #231B3D
  <color:#0BE784><b>Pipeline Selection Logic:</b></color>
  <color:#96DDF2>1. Check BigQuery cost guard
  <color:#96DDF2>2. If blocked → Use API pipeline
  <color:#96DDF2>3. If API fails → Mark for retry
  <color:#96DDF2>4. Track all attempts with timestamps
end note

@enduml
