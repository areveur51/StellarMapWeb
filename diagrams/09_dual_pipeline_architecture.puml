@startuml Dual-Pipeline Architecture
!theme vibrant
skinparam backgroundColor #1a1625
skinparam defaultFontColor #96DDF2
skinparam defaultFontSize 12
skinparam arrowColor #0BE784
skinparam rectangleBorderColor #96DDF2
skinparam databaseBorderColor #FF6AC1
skinparam cloudBorderColor #ffc107

title Dual-Pipeline Architecture\n(BigQuery + API Fallback System)

' Define components
cloud "Google BigQuery\n(Stellar Hubble Dataset)" as BigQuery #ffc107
cloud "Horizon API\n(Stellar.org)" as Horizon #96DDF2
cloud "Stellar Expert API\n(stellar.expert)" as Expert #96DDF2

rectangle "Django Backend" {
  rectangle "BigQuery Pipeline\n(Fast Path)" as BQPipeline #0BE784 {
    card "Cost Guard\n($0.71/query limit)" as CostGuard
    card "BigQuery Client\n(50-90s per account)" as BQClient
    card "Child Account Discovery\n(up to 100K children)" as ChildDiscovery
  }
  
  rectangle "API Pipeline\n(Reliable Fallback)" as APIPipeline #96DDF2 {
    card "8-Stage Processor\n(180-300s per account)" as Processor
    card "Rate Limiter\n(71% of max)" as RateLimiter
    card "Tenacity Retry Logic" as Retry
  }
  
  rectangle "Hybrid Orchestrator" as Orchestrator #ffc107 {
    card "Pipeline Router" as Router
    card "Source Tracker\n(pipeline_source field)" as Tracker
    card "Processing Monitor\n(timestamps)" as Monitor
  }
}

database "Astra DB (Cassandra)\nstellar_creator_account_lineage" as Cassandra #FF6AC1 {
  card "pipeline_source: TEXT\n(BIGQUERY | API | BIGQUERY_WITH_API_FALLBACK)" as Field1
  card "last_pipeline_attempt: TIMESTAMP" as Field2
  card "processing_started_at: TIMESTAMP" as Field3
}

rectangle "Admin Configuration\n(SQLite)" as Admin #a78bfa {
  card "BigQueryPipelineConfig\n(cost_limit, pipeline_mode)" as BQConfig
  card "APIRateLimiterConfig\n(percentage-based limits)" as APIConfig
}

rectangle "Dashboard UI" as Dashboard #96DDF2 {
  card "Dual-Pipeline Metrics\n(source breakdown)" as Metrics
  card "API Health Monitoring" as Health
  card "BigQuery Cost Tracking" as CostTrack
}

' Main flow paths
BigQuery --> CostGuard : "Check budget"
CostGuard --> BQClient : "✓ Within limit"
CostGuard -[#FF6AC1]-> Router : "✗ Cost limit exceeded\n(Fallback to API)"
BQClient --> ChildDiscovery : "Query Hubble dataset"
ChildDiscovery --> Tracker : "Mark: BIGQUERY"

Router --> Processor : "Route to API pipeline"
Horizon --> Processor : "Account data"
Expert --> Processor : "Creator + assets"
RateLimiter --> Processor : "85 req/min (Horizon)\n35 req/min (Expert)"
Retry --> Processor : "Handle failures"
Processor --> Tracker : "Mark: API or\nBIGQUERY_WITH_API_FALLBACK"

' Configuration flows
Admin --> CostGuard : "cost_limit_usd"
Admin --> Router : "pipeline_mode"
Admin --> RateLimiter : "horizon_percentage\nexpert_percentage"

' Data persistence
Tracker --> Cassandra : "Save with source tag"
Monitor --> Cassandra : "Track timestamps"

' Dashboard display
Cassandra --> Metrics : "Query by pipeline_source"
Cassandra --> Health : "API usage stats"
BQConfig --> CostTrack : "Cost limits & mode"

' Performance annotations
note right of BQClient
  **Fast Path Performance:**
  • 50-90 seconds per account
  • Processes up to 100K children
  • Cost: ~$0.35 per account
  • Limited by budget constraints
end note

note right of Processor
  **Fallback Path Performance:**
  • 180-300 seconds per account
  • Rate-limited (71% of max)
  • No direct cost (free APIs)
  • Reliable for stuck records
end note

note bottom of Cassandra
  **Dual-Pipeline Tracking Fields:**
  • pipeline_source: Identifies data origin
  • last_pipeline_attempt: Retry tracking
  • processing_started_at: Stuck detection
  
  **Migration completed:** 2025-10-22
end note

note top of Router
  **Pipeline Selection Logic:**
  1. Check BigQuery cost guard
  2. If blocked → Use API pipeline
  3. If API fails → Mark for retry
  4. Track all attempts with timestamps
end note

@enduml
