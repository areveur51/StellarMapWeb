@startuml HVA Ranking System

skinparam backgroundColor #261D45
skinparam defaultFontColor #96DDF2

skinparam participant {
  BackgroundColor #100D23
  BorderColor #0BE784
  FontColor #96DDF2
}

skinparam actor {
  BackgroundColor #0BE784
  BorderColor #0BE784
  FontColor #100D23
}

skinparam database {
  BackgroundColor #100D23
  BorderColor #0BE784
  FontColor #96DDF2
}

skinparam note {
  BackgroundColor #231B3D
  BorderColor #3f2c70
  FontColor #96DDF2
}

skinparam sequence {
  ArrowColor #01C176
  LifeLineBorderColor #0BE784
  LifeLineBackgroundColor #100D23
  DividerBackgroundColor #100D23
  DividerBorderColor #0BE784
  DividerFontColor #0BE784
  DividerFontSize 14
  DividerFontStyle bold
  GroupBackgroundColor #100D23
  GroupBorderColor #0BE784
  GroupBorderThickness 2
  GroupHeaderFontColor #0BE784
  GroupHeaderFontSize 12
  GroupHeaderFontStyle bold
}

title <color:#0BE784>Multi-Threshold HVA Ranking System

actor User as user #0BE784
actor Admin as admin #0BE784
participant "Django Admin" as adminportal
participant "Django Server" as django
participant "BigQuery Pipeline" as pipeline
participant "HVARankingHelper" as helper
database "Astra DB\n(Cassandra)" as cassandra
participant "HVA Leaderboard\nView" as view

== <color:#0BE784>Admin Configuration ==

admin -[#01C176]-> adminportal: Configure HVA thresholds
activate adminportal
adminportal -[#01C176]-> cassandra: Update BigQueryPipelineConfig\nhva_supported_thresholds:\n"10000,50000,100000,\n500000,750000,1000000"
note right #231B3D
    <color:#0BE784>Fully Configurable:
    <color:#96DDF2>Admins can set any
    <color:#96DDF2>threshold list
    <color:#96DDF2>(e.g., "25000,100000,5000000")
end note
cassandra -[#01C176]-> adminportal: Saved
adminportal -[#01C176]-> admin: Configuration updated
deactivate adminportal

== <color:#0BE784>Initial Setup: Multi-Threshold Backfill ==

user -[#01C176]-> django: python manage.py\nrecalculate_hva_rankings_multi
activate django
django -[#01C176]-> cassandra: Get supported thresholds
cassandra -[#01C176]-> django: [10K, 50K, 100K, 500K, 750K, 1M]

loop For each threshold
    django -[#01C176]-> cassandra: Query accounts\nWHERE xlm_balance >= threshold
    cassandra -[#01C176]-> django: HVA accounts for threshold
    django -[#01C176]-> helper: get_current_rankings(network, threshold)
    activate helper
    helper -[#01C176]-> helper: Sort by XLM balance DESC
    helper -[#01C176]-> django: Rankings (1-N)
    deactivate helper
    
    loop For each HVA account
        django -[#01C176]-> cassandra: Check for existing change events\nFOR threshold
        alt No existing events for this threshold
            django -[#01C176]-> cassandra: Create HVAStandingChange\nevent_type=ENTERED\nxlm_threshold=threshold
            note right #231B3D
                <color:#96DDF2>Records initial entry
                <color:#96DDF2>per threshold
            end note
        end
    end
end

django -[#01C176]-> user: Backfill complete\n(X events across Y thresholds)
deactivate django

== <color:#0BE784>Continuous Tracking: Per-Threshold Updates ==

pipeline -[#01C176]-> cassandra: Update account balance\n(old_balance ‚Üí new_balance)
activate pipeline

pipeline -[#01C176]-> cassandra: Get supported thresholds
cassandra -[#01C176]-> pipeline: [10K, 50K, 100K, 500K, 750K, 1M]

loop For each threshold
    pipeline -[#01C176]-> helper: detect_and_record_change(\naccount, old_balance, new_balance, threshold)
    activate helper
    
    helper -[#01C176]-> helper: Calculate old_rank for threshold
    helper -[#01C176]-> helper: Calculate new_rank for threshold
    
    alt Significant change for this threshold
        helper -[#01C176]-> helper: Determine event_type:\n<color:#96DDF2>‚Ä¢ ENTERED (NULL ‚Üí rank)\n<color:#96DDF2>‚Ä¢ EXITED (rank ‚Üí NULL)\n<color:#96DDF2>‚Ä¢ RANK_UP (rank improved ‚â•10)\n<color:#96DDF2>‚Ä¢ RANK_DOWN (rank dropped ‚â•10)
        
        helper -[#01C176]-> cassandra: Create HVAStandingChange\nxlm_threshold=threshold
        note right #231B3D
            <color:#0BE784>Event includes:
            <color:#96DDF2>‚Ä¢ stellar_account
            <color:#96DDF2>‚Ä¢ change_time (TimeUUID)
            <color:#96DDF2>‚Ä¢ event_type
            <color:#96DDF2>‚Ä¢ old_rank, new_rank
            <color:#96DDF2>‚Ä¢ old_balance, new_balance
            <color:#96DDF2>‚Ä¢ xlm_threshold
            <color:#96DDF2>‚Ä¢ network_name
            <color:#96DDF2>‚Ä¢ rank_change
            <color:#96DDF2>‚Ä¢ balance_change_pct
        end note
        
        helper -[#01C176]-> pipeline: Change event created
    else No significant change
        helper -[#01C176]-> pipeline: NULL (no event)
    end
    
    deactivate helper
end

pipeline -[#01C176]-> pipeline: Continue pipeline
deactivate pipeline

== <color:#0BE784>User Views Multi-Threshold Leaderboard ==

user -[#01C176]-> view: GET /high-value-accounts/\n?threshold=100000
activate view

view -[#01C176]-> cassandra: Get supported thresholds
cassandra -[#01C176]-> view: [10K, 50K, 100K, 500K, 750K, 1M]

view -[#01C176]-> view: Display threshold dropdown

alt High threshold (‚â• default)
    view -[#01C176]-> cassandra: Query WHERE is_hva=True\nAND network_name=X
    note right #231B3D
        <color:#0BE784>Smart Query Strategy:
        <color:#96DDF2>Uses is_hva filter
        <color:#96DDF2>for high thresholds
    end note
else Low threshold (< default)
    view -[#01C176]-> cassandra: Query WHERE network_name=X
    note right #231B3D
        <color:#0BE784>Alternative Strategy:
        <color:#96DDF2>Network filter only,
        <color:#96DDF2>apply threshold in-memory
    end note
end

cassandra -[#01C176]-> view: Accounts

view -[#01C176]-> view: Filter by selected threshold\nSort by xlm_balance DESC\nFormat with commas

view -[#01C176]-> view: Calculate cutoff_time\n(24 hours ago)

loop For each account (partition-key lookup)
    view -[#01C176]-> cassandra: Query HVAStandingChange\nWHERE stellar_account = X\nAND xlm_threshold = selected\nAND network_name = Y\nAND created_at >= cutoff_time
    cassandra -[#01C176]-> view: Most recent change event
    
    alt Change event found
        view -[#01C176]-> view: Enrich account:\n<color:#96DDF2>‚Ä¢ rank_change_24h\n<color:#96DDF2>‚Ä¢ rank_change_direction\n<color:#96DDF2>‚Ä¢ is_new_entry
        note right #231B3D
            <color:#0BE784>UI displays:
            <color:#96DDF2>üîº ‚Üë5 (rank improved)
            <color:#96DDF2>üîΩ ‚Üì2 (rank dropped)
            <color:#96DDF2>‚≠ê NEW (new entry)
            <color:#96DDF2>Balances: 2,483,571.75 XLM
            <color:#96DDF2>Clickable account links
        end note
    end
end

view -[#01C176]-> user: Rendered leaderboard\nwith threshold selector
deactivate view

== <color:#0BE784>Storage Efficiency ==

note over cassandra #231B3D
    <color:#0BE784>**Event-Based Multi-Threshold Tracking**
    <color:#96DDF2>Only stores CHANGES per threshold
    
    <color:#96DDF2>Traditional approach (all thresholds):
    <color:#96DDF2>‚Ä¢ 6 thresholds √ó 1,000 accounts √ó 24 snapshots/day
    <color:#96DDF2>‚Ä¢ = 144,000 records/day
    
    <color:#0BE784>Event-based approach:
    <color:#96DDF2>‚Ä¢ Only ~50 accounts change significantly/day
    <color:#96DDF2>‚Ä¢ √ó 6 thresholds = ~300 events/day
    <color:#0BE784>‚Ä¢ **480x storage reduction**
    
    <color:#96DDF2>Network-aware filtering prevents
    <color:#96DDF2>cross-network data leakage
end note

@enduml
