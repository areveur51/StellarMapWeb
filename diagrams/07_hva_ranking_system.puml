@startuml HVA Ranking System
!theme cerulean-outline
skinparam backgroundColor #0a0e27
skinparam defaultFontColor #00ffff
skinparam defaultFontSize 12
skinparam roundcorner 10

title High Value Account (HVA) Ranking & Change Tracking System

actor User as user
participant "Django Server" as django
participant "BigQuery Pipeline" as pipeline
participant "HVARankingHelper" as helper
database "Astra DB\n(Cassandra)" as cassandra
participant "HVA Leaderboard\nView" as view

== Initial Setup: Backfill Rankings ==

user -> django: python manage.py\nrecalculate_hva_rankings
activate django
django -> cassandra: Query all accounts\nWHERE xlm_balance > 1M
cassandra --> django: HVA accounts
django -> helper: get_current_rankings(network)
activate helper
helper -> helper: Sort by XLM balance DESC
helper --> django: Rankings (1-1000)
deactivate helper

loop For each HVA account
    django -> cassandra: Check for existing\nchange events
    alt No existing events
        django -> cassandra: Create HVAStandingChange\nevent_type=ENTERED
        note right
            Records initial entry
            into top 1000
        end note
    end
end

django --> user: Backfill complete\n(X events created)
deactivate django

== Continuous Tracking: Pipeline Updates ==

pipeline -> cassandra: Update account balance\n(old_balance → new_balance)
activate pipeline

pipeline -> helper: detect_and_record_change(\naccount, old_balance, new_balance)
activate helper

helper -> helper: Calculate old_rank\nfrom old_balance
helper -> helper: Calculate new_rank\nfrom new_balance

alt Significant change detected
    helper -> helper: Determine event_type:\n- ENTERED (NULL → rank)\n- EXITED (rank → NULL)\n- RANK_UP (rank improved ≥10)\n- RANK_DOWN (rank dropped ≥10)\n- BALANCE_INCREASE (≥5%)\n- BALANCE_DECREASE (≥5%)
    
    helper -> cassandra: Create HVAStandingChange
    note right
        Event includes:
        - stellar_account
        - change_time (TimeUUID)
        - event_type
        - old_rank, new_rank
        - old_balance, new_balance
        - rank_change (calculated)
        - balance_change_pct (calculated)
    end note
    
    helper --> pipeline: Change event created
else No significant change
    helper --> pipeline: NULL (no event)
end

deactivate helper
pipeline --> pipeline: Continue pipeline
deactivate pipeline

== User Views Leaderboard ==

user -> view: GET /high-value-accounts
activate view

view -> cassandra: Query all accounts\nWHERE xlm_balance > 1M\nORDER BY xlm_balance DESC
cassandra --> view: Sorted HVA list

view -> view: Calculate cutoff_time\n(24 hours ago)

loop For each account
    view -> cassandra: Query HVAStandingChange\nWHERE stellar_account = X\nAND created_at >= cutoff_time\nLIMIT 1
    cassandra --> view: Most recent change event
    
    alt Change event found
        view -> view: Enrich account:\n- rank_change_24h\n- rank_change_direction\n- is_new_entry
        note right
            UI displays:
            🔼 +5 (rank improved)
            🔽 -2 (rank dropped)
            ⭐ NEW (entered top 1000)
            +12.5% (balance increased)
        end note
    end
end

view --> user: Rendered leaderboard\nwith change indicators
deactivate view

== Storage Efficiency ==

note over cassandra
    **Event-Based Tracking**
    Only stores CHANGES, not snapshots
    
    Traditional snapshot approach:
    - 1,000 accounts × 24 snapshots/day = 24,000 records/day
    
    Event-based approach:
    - Only ~50 accounts change significantly/day
    - **480x storage reduction**
    
    Event retention enables:
    - Historical rank trend analysis
    - Leaderboard volatility metrics
    - Account trajectory insights
end note

@enduml
