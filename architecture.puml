@startuml StellarMapWeb Architecture

!define RECTANGLE class

skinparam backgroundColor #1a1a1a
skinparam defaultTextAlignment center

skinparam component {
  BackgroundColor #2d2d2d
  BorderColor #4a9eff
  FontColor #e0e0e0
  ArrowColor #4a9eff
}

skinparam database {
  BackgroundColor #2d2d2d
  BorderColor #ff6b6b
  FontColor #e0e0e0
}

skinparam cloud {
  BackgroundColor #2d2d2d
  BorderColor #51cf66
  FontColor #e0e0e0
}

skinparam note {
  BackgroundColor #3d3d3d
  BorderColor #ffd43b
  FontColor #e0e0e0
}

title StellarMapWeb System Architecture

' User Layer
actor User #4a9eff

' Frontend Layer
package "Frontend Layer" #2d2d2d {
  component "Vue.js\nComponents" as Vue #4a9eff
  component "D3.js\nVisualization" as D3 #4a9eff
  component "Bootstrap\nUI" as Bootstrap #4a9eff
}

' Django Application Layer
package "Django Application" #2d2d2d {
  component "webApp\n(User Interface)" as WebApp #51cf66
  component "apiApp\n(API & Data Mgmt)" as ApiApp #51cf66
  component "radialTidyTreeApp\n(Visualization)" as RadialApp #51cf66
}

' Data Pipeline
package "Data Collection Pipeline (2-3 min)" #2d2d2d {
  component "Stage 1\nMake Parent Lineage" as Stage1 #ffd43b
  component "Stage 2\nCollect Horizon Data" as Stage2 #ffd43b
  component "Stage 3\nAccount Attributes" as Stage3 #ffd43b
  component "Stage 4\nAccount Assets" as Stage4 #ffd43b
  component "Stage 5\nAccount Flags" as Stage5 #ffd43b
  component "Stage 6\nSE Directory" as Stage6 #ffd43b
  component "Stage 7\nAccount Creator" as Stage7 #ffd43b
  component "Stage 8\nMake Grandparent" as Stage8 #ffd43b
}

' Monitoring & Health
package "Monitoring System" #2d2d2d {
  component "Cron Health\nMonitor" as CronHealth #ff6b6b
  component "Stuck Record\nRecovery" as Recovery #ff6b6b
  component "Stage Execution\nTracking" as StageTracking #ff6b6b
}

' Background Workers
component "Cron Worker\n(run_cron_jobs.py)" as CronWorker #9775fa

' External APIs
cloud "Horizon API\n(Stellar Network)" as Horizon #51cf66
cloud "Stellar Expert\n(Enhanced Data)" as StellarExpert #51cf66

' Database Layer
database "Astra DB\n(Cassandra)" as AstraDB #ff6b6b {
  storage "StellarAccountSearchCache\n(12hr cache)" as CacheTable
  storage "StellarCreatorAccountLineage\n(Lineage data)" as LineageTable
  storage "StellarAccountStageExecution\n(Pipeline tracking)" as StageTable
  storage "ManagementCronHealth\n(Health status)" as HealthTable
}

' User Connections
User --> Vue : "Interacts with"
User --> D3 : "Views diagrams"

' Frontend to Django
Vue --> WebApp : "HTTP Requests"
Bootstrap --> WebApp : "Styling"
D3 --> RadialApp : "Data visualization"

' Django Internal
WebApp --> ApiApp : "API Calls"
WebApp <-- ApiApp : "JSON Response"

' API to Pipeline
ApiApp --> Stage1 : "Initiates search"
Stage1 --> Stage2 : "Sequential"
Stage2 --> Stage3 : "Pipeline"
Stage3 --> Stage4 : "Execution"
Stage4 --> Stage5 : "Every 2 min"
Stage5 --> Stage6 : "Background"
Stage6 --> Stage7 : "Processing"
Stage7 --> Stage8 : "Complete"

' Cron Worker Management
CronWorker --> CronHealth : "Health check"
CronWorker --> Stage1 : "Orchestrates"
CronWorker --> Recovery : "Manages stuck\nrecords"

' Monitoring
StageTracking --> StageTable : "Tracks progress"
CronHealth --> HealthTable : "Logs health"
Recovery --> CacheTable : "Resets PENDING"
Recovery --> LineageTable : "Recovery logic"

' External API Connections
Stage2 --> Horizon : "Fetch operations\n& effects"
Stage3 --> Horizon : "Account attributes"
Stage4 --> Horizon : "Account assets"
Stage6 --> StellarExpert : "Directory data"

' Database Connections
ApiApp --> CacheTable : "Read/Write\n(IN clause)"
ApiApp --> LineageTable : "Read/Write\n(IN clause)"
ApiApp --> StageTable : "Read status"
Stage1 ..> LineageTable : "Create records"
Stage2 ..> LineageTable : "Update data"
Stage3 ..> LineageTable : "Enrich data"
Stage4 ..> LineageTable : "Enrich data"
Stage5 ..> LineageTable : "Enrich data"
Stage6 ..> LineageTable : "Enrich data"
Stage7 ..> LineageTable : "Enrich data"
Stage8 ..> LineageTable : "Create ancestors"

' Auto-refresh endpoints
note right of ApiApp
  <b>Optimized Endpoints:</b>
  /api/pending-accounts/
  (2 queries with IN clause)
  
  /api/stage-executions/
  (Real-time progress)
  
  5-second auto-refresh
end note

note bottom of AstraDB
  <b>Query Optimization:</b>
  88% reduction in queries
  204 â†’ 24 queries/min
  Using status__in=[...] pattern
end note

note left of CronWorker
  <b>Processing Time:</b>
  2-3 minutes per address
  
  <b>Statuses:</b>
  PENDING, IN_PROGRESS
  DONE, RE_INQUIRY
  FAILED (terminal)
  INVALID (terminal)
end note

@enduml
