version: '3.8'

# Production-ready setup with Redis for cluster-wide rate limiting
# Use this instead of docker-compose.nginx.yml for multi-instance deployments

services:
  # Redis for shared cache (rate limiting across instances)
  redis:
    image: redis:alpine
    container_name: stellarmapweb_redis
    restart: unless-stopped
    networks:
      - stellarmapweb_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx load balancer (entry point)
  nginx:
    image: nginx:alpine
    container_name: stellarmapweb_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./staticfiles:/app/staticfiles:ro
    depends_on:
      - django1
      - django2
      - redis
    restart: unless-stopped
    networks:
      - stellarmapweb_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django instance 1
  django1:
    build: .
    container_name: stellarmapweb_django1
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 StellarMapWeb.wsgi:application
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=StellarMapWeb.production
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./staticfiles:/app/staticfiles
    expose:
      - "5000"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - stellarmapweb_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health/')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django instance 2 (for load balancing)
  django2:
    build: .
    container_name: stellarmapweb_django2
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 StellarMapWeb.wsgi:application
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=StellarMapWeb.production
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./staticfiles:/app/staticfiles
    expose:
      - "5000"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - stellarmapweb_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health/')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BigQuery pipeline cron job (optional)
  bigquery_cron:
    build: .
    container_name: stellarmapweb_bigquery_cron
    command: >
      sh -c "while true; do
        python manage.py bigquery_pipeline --limit 100;
        sleep 3600;
      done"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=StellarMapWeb.production
    restart: unless-stopped
    networks:
      - stellarmapweb_network
    depends_on:
      - django1
      - redis

networks:
  stellarmapweb_network:
    driver: bridge
