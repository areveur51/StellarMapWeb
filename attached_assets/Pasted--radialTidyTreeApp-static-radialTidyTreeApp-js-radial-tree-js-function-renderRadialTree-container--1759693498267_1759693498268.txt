// radialTidyTreeApp/static/radialTidyTreeApp/js/radial_tree.js
function renderRadialTree(container, treeData) {
    d3.select(container).selectAll("svg").remove();

    const width = 928;
    const height = width;
    const radius = width / 2 - 120;

    const svg = d3.select(container).append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", `translate(${width / 2},${height / 2})`);

    const tree = d3.tree()
        .size([2 * Math.PI, radius])
        .separation((a, b) => (a.parent === b.parent ? 1 : 2) / a.depth);

    const cleanTreeData = JSON.parse(JSON.stringify(treeData));
    console.log("Clean treeData:", cleanTreeData);

    const root = d3.hierarchy(cleanTreeData);
    console.log("Root children:", root.children ? root.children.map(d => d.data.stellar_account || d.data.asset_code) : "No children");
    console.log("Full hierarchy before tree:", root.descendants().map(d => ({
        name: d.data.stellar_account || d.data.asset_code || "Unnamed",
        node_type: d.data.node_type,
        depth: d.depth,
        children: d.children ? d.children.map(c => c.data.stellar_account || c.data.asset_code) : []
    })));

    tree(root);
    console.log("Full hierarchy after tree:", root.descendants().map(d => ({
        name: d.data.stellar_account || d.data.asset_code || "Unnamed",
        node_type: d.data.node_type,
        depth: d.depth,
        x: d.x,
        y: d.y,
        children: d.children ? d.children.map(c => c.data.stellar_account || c.data.asset_code) : []
    })));

    const totalNodes = root.descendants().length;
    const angleStep = 2 * Math.PI / totalNodes;
    root.descendants().forEach((d, i) => {
        d.x = i * angleStep;
    });
    console.log("Adjusted node positions:", root.descendants().map(d => ({
        name: d.data.stellar_account || d.data.asset_code || "Unnamed",
        node_type: d.data.node_type,
        x: d.x,
        y: d.y
    })));

    const link = svg.selectAll(".link")
        .data(root.links())
        .enter().append("path")
        .attr("class", "link")
        .attr("d", d3.linkRadial()
            .angle(d => d.x)
            .radius(d => d.y))
        .style("stroke", "#ccc")
        .style("stroke-width", "1.5px")
        .style("fill", "none");

    const node = svg.selectAll(".node")
        .data(root.descendants())
        .enter().append("g")
        .attr("class", "node")
        .attr("transform", d => {
            const angle = (d.x * 180 / Math.PI) - 90;
            return `rotate(${angle})translate(${d.y},0)`;
        });

    node.append("circle")
        .attr("r", 5)
        .style("fill", d => {
            console.log("Rendering node:", d.data.stellar_account || d.data.asset_code, "Type:", d.data.node_type);
            return d.data.node_type === "ASSET" ? "#fcec04" : "#3f2c70";
        })
        .style("stroke", d => d.data.node_type === "ASSET" ? "#e0d700" : "#00FF9C")
        .style("stroke-width", "1px")
        .on("mouseover", showTooltip)
        .on("mouseout", hideTooltip);

    node.append("text")
        .attr("dy", ".31em")
        .attr("x", d => d.x < Math.PI ? 10 : -10)
        .attr("text-anchor", d => d.x < Math.PI ? "start" : "end")
        .attr("transform", d => d.x >= Math.PI ? "rotate(180)" : null)
        .text(d => d.data.stellar_account || d.data.asset_code || "Unnamed")
        .style("fill", "white")
        .style("font-size", "12px");

    let tooltip = d3.select("body").select(".tooltip");
    if (tooltip.empty()) {
        tooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0)
            .style("position", "absolute")
            .style("background", "rgba(0, 0, 0, 0.8)")
            .style("color", "white")
            .style("padding", "7px")
            .style("border-radius", "4px")
            .style("box-shadow", "3px 3px 10px rgba(0, 0, 0, 0.25)")
            .style("font", "10px sans-serif")
            .style("width", "196px")
            .style("word-wrap", "break-word");
    }

    function showTooltip(d) {
        let tooltipHTML = "<b>Name:</b> " + (d.data.stellar_account || d.data.asset_code || "Unnamed") + "<br>";
        if (d.data.node_type === "ASSET") {
            tooltipHTML += "<b>Issuer:</b> " + (d.data.asset_issuer || "N/A") + "<br>";
            tooltipHTML += "<b>Asset Type:</b> " + (d.data.asset_type || "N/A") + "<br>";
            tooltipHTML += "<b>Balance:</b> " + (d.data.balance || "0") + "<br>";
        } else {
            tooltipHTML += "<b>Created:</b> " + (d.data.created || "N/A") + "<br>";
            tooltipHTML += "<b>Home Domain:</b> " + (d.data.home_domain || "N/A") + "<br>";
            tooltipHTML += "<b>XLM Balance:</b> " + (d.data.xlm_balance || "0") + "<br>";
            tooltipHTML += "<b>Creator:</b> " + (d.data.creator_account || "N/A") + "<br>";
        }
        tooltip.html(tooltipHTML)
            .style("opacity", 0.9)
            .style("left", (d3.event.pageX + 10) + "px")
            .style("top", (d3.event.pageY - 28) + "px");
    }

    function hideTooltip() {
        tooltip.style("opacity", 0);
    }
}
